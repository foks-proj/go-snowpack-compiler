// Code generated by goyacc -o parser.go -p snowp parser.y. DO NOT EDIT.

//line parser.y:3
package lib

import __yyfmt__ "fmt"

//line parser.y:3

import (
	"fmt"
	"strconv"
)

//line parser.y:12
type snowpSymType struct {
	yys            int
	root           Root
	uniqueId       UniqueID
	uint           uint64
	rawval         string
	stmts          []Statement
	stmt           Statement
	imprt          Import
	dec            Decorators
	doc            Docstring
	docRaw         string
	ident          Identifier
	typ            Type
	num            int
	field          Field
	fields         []Field
	cases          []Case
	cas            Case
	intp           *int
	caseLabel      CaseLabel
	caseLabels     []CaseLabel
	enumValues     []EnumValue
	enumValue      EnumValue
	protoModifiers []ProtocolModifier
	protoModifier  ProtocolModifier
	params         []Param
	param          Param
	method         Method
	methods        []Method
}

const TokenAt = 57346
const TokenSemicolon = 57347
const TokenAs = 57348
const TokenEquals = 57349
const TokenDot = 57350
const TokenImport = 57351
const TokenTypeScriptImport = 57352
const TokenGoImport = 57353
const TokenList = 57354
const TokenLParen = 57355
const TokenRParen = 57356
const TokenText = 57357
const TokenUint = 57358
const TokenInt = 57359
const TokenBool = 57360
const TokenBlob = 57361
const TokenFuture = 57362
const TokenLBrace = 57363
const TokenRBrace = 57364
const TokenStruct = 57365
const TokenOption = 57366
const TokenColon = 57367
const TokenVariant = 57368
const TokenSwitch = 57369
const TokenCase = 57370
const TokenTrue = 57371
const TokenFalse = 57372
const TokenDefault = 57373
const TokenVoid = 57374
const TokenEnum = 57375
const TokenProtocol = 57376
const TokenErrors = 57377
const TokenArgHeader = 57378
const TokenResHeader = 57379
const TokenArrow = 57380
const TokenComma = 57381
const TokenUint64Val = 57382
const TokenIntVal = 57383
const TokenUint32Val = 57384
const TokenDQoutedString = 57385
const TokenIdentifier = 57386
const TokenDoc = 57387
const TokenTypedef = 57388

var snowpToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"TokenAt",
	"TokenSemicolon",
	"TokenAs",
	"TokenEquals",
	"TokenDot",
	"TokenImport",
	"TokenTypeScriptImport",
	"TokenGoImport",
	"TokenList",
	"TokenLParen",
	"TokenRParen",
	"TokenText",
	"TokenUint",
	"TokenInt",
	"TokenBool",
	"TokenBlob",
	"TokenFuture",
	"TokenLBrace",
	"TokenRBrace",
	"TokenStruct",
	"TokenOption",
	"TokenColon",
	"TokenVariant",
	"TokenSwitch",
	"TokenCase",
	"TokenTrue",
	"TokenFalse",
	"TokenDefault",
	"TokenVoid",
	"TokenEnum",
	"TokenProtocol",
	"TokenErrors",
	"TokenArgHeader",
	"TokenResHeader",
	"TokenArrow",
	"TokenComma",
	"TokenUint64Val",
	"TokenIntVal",
	"TokenUint32Val",
	"TokenDQoutedString",
	"TokenIdentifier",
	"TokenDoc",
	"TokenTypedef",
}

var snowpStatenames = [...]string{}

const snowpEofCode = 1
const snowpErrCode = 2
const snowpInitialStackSize = 16

//line parser.y:499

//line yacctab:1
var snowpExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 5,
	1, 1,
	-2, 8,
}

const snowpPrivate = 57344

const snowpLast = 218

var snowpAct = [...]uint8{
	168, 81, 167, 122, 144, 150, 155, 156, 152, 135,
	44, 20, 70, 57, 79, 34, 36, 75, 73, 74,
	76, 80, 75, 73, 74, 76, 80, 98, 35, 37,
	38, 39, 40, 79, 169, 52, 75, 73, 74, 76,
	80, 45, 3, 51, 50, 125, 36, 85, 46, 36,
	58, 36, 33, 32, 68, 31, 27, 83, 58, 28,
	102, 161, 88, 89, 90, 36, 29, 30, 79, 36,
	84, 75, 73, 74, 76, 80, 72, 109, 8, 26,
	9, 158, 79, 173, 99, 75, 73, 74, 76, 80,
	4, 60, 47, 148, 105, 101, 153, 154, 107, 138,
	36, 171, 139, 138, 106, 104, 139, 108, 102, 165,
	141, 36, 163, 110, 36, 114, 121, 118, 119, 123,
	100, 61, 62, 63, 113, 130, 87, 54, 48, 127,
	133, 126, 160, 146, 145, 120, 117, 116, 115, 132,
	151, 129, 95, 159, 147, 93, 92, 55, 21, 22,
	23, 96, 53, 162, 43, 42, 164, 41, 178, 177,
	166, 128, 111, 145, 91, 151, 170, 66, 174, 172,
	65, 64, 123, 6, 109, 175, 176, 4, 86, 103,
	112, 7, 143, 142, 131, 59, 49, 56, 149, 137,
	136, 134, 82, 97, 94, 157, 124, 69, 78, 77,
	67, 71, 140, 25, 24, 19, 18, 17, 11, 16,
	15, 14, 13, 12, 10, 5, 2, 1,
}

var snowpPact = [...]int16{
	173, -1000, -1000, 168, 38, 139, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	33, 12, 10, 9, -1000, -30, -28, -28, -28, -28,
	-28, 151, 149, 148, -1000, 173, -1000, 173, 65, 107,
	-1000, 0, -1, -9, 145, -1000, 106, 134, -28, 86,
	166, 165, 162, 56, -1000, -28, 25, -1000, 174, -1000,
	105, 70, 70, 70, -1000, -1000, -1000, 159, -1000, -1000,
	-1000, -1000, 133, -1000, -1000, -1000, -1000, -1000, -1000, 132,
	129, 143, 5, 95, -1000, -1000, 19, -1000, -1000, -1000,
	-1000, -1000, 7, 70, -1000, 19, -28, -1000, -1000, 170,
	7, 157, -1000, 102, 124, 123, 122, -1000, 92, 19,
	121, -1000, -1000, -1000, -28, -1000, -1000, -1000, 21, -1000,
	173, 170, 156, -1000, -1000, 128, 104, 126, -1000, 70,
	75, 85, -28, 119, 71, -1000, -1000, -1000, 67, 170,
	43, -28, 118, 22, -1000, 170, -1000, -1000, -1000, 73,
	-1000, -1000, -1000, -1000, -1000, 84, -1000, 155, 2, -1000,
	-1000, -28, 76, 67, 58, 2, -1000, -1000, -1000, -1000,
	-1000, 21, -1000, 2, 154, -1000, 153, -1000, -1000,
}

var snowpPgo = [...]uint8{
	0, 217, 216, 41, 10, 215, 214, 213, 212, 211,
	210, 209, 208, 207, 206, 205, 11, 204, 203, 1,
	202, 201, 0, 12, 200, 199, 198, 197, 3, 196,
	2, 195, 194, 8, 7, 193, 192, 191, 9, 190,
	189, 5, 188, 187, 13, 186, 185, 184, 183, 182,
	4, 6, 181, 180, 179,
}

var snowpR1 = [...]int8{
	0, 1, 5, 5, 13, 14, 15, 17, 18, 18,
	16, 4, 4, 21, 33, 32, 32, 25, 26, 26,
	23, 23, 23, 23, 23, 23, 22, 22, 27, 24,
	24, 7, 34, 51, 51, 29, 28, 28, 35, 36,
	36, 8, 37, 37, 38, 38, 42, 42, 41, 41,
	41, 41, 30, 30, 39, 40, 9, 44, 43, 43,
	10, 12, 12, 12, 6, 6, 6, 6, 6, 6,
	19, 2, 52, 52, 3, 46, 46, 46, 45, 45,
	20, 20, 48, 48, 49, 49, 50, 47, 31, 31,
	53, 54, 54, 11,
}

var snowpR2 = [...]int8{
	0, 2, 0, 2, 5, 5, 5, 1, 0, 2,
	1, 0, 1, 4, 1, 0, 3, 2, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 1,
	1, 7, 2, 0, 1, 4, 1, 1, 5, 0,
	2, 7, 1, 2, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 6, 5, 13, 4, 1, 2,
	6, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 1, 2, 2, 2, 2, 0, 2,
	0, 2, 0, 1, 1, 3, 4, 3, 0, 2,
	7, 0, 2, 8,
}

var snowpChk = [...]int16{
	-1000, -1, -2, -3, 4, -5, 5, -52, 40, 42,
	-6, -12, -7, -8, -9, -10, -11, -13, -14, -15,
	-16, 9, 10, 11, -17, -18, 46, 23, 26, 33,
	34, 43, 43, 43, 45, -19, 44, -19, -19, -19,
	-19, 6, 6, 6, -4, -3, -4, 27, 21, -45,
	44, 44, 44, 7, 21, 13, -43, -44, -19, -46,
	-3, 35, 36, 37, 5, 5, 5, -24, -22, -27,
	-23, -21, 20, 16, 17, 15, 18, -25, -26, 12,
	19, -19, -36, -19, -44, 22, 4, 21, -22, -22,
	-22, 5, 13, 13, -32, 13, 8, -35, 22, -19,
	25, -33, 41, -54, -23, -22, -33, -19, -34, 4,
	-23, 5, -53, 22, -16, 14, 14, 14, 25, -33,
	14, -19, -28, -22, -29, 24, -4, -34, 5, 13,
	21, -47, 13, -22, -37, -38, -39, -40, 28, 31,
	-20, 25, -48, -49, -50, -19, 14, -38, 22, -42,
	-41, -19, -33, 29, 30, -51, -34, -31, 38, -19,
	14, 39, -34, 39, -51, 25, 5, -30, -22, 32,
	-50, 25, -41, 25, -30, -28, -30, 5, 5,
}

var snowpDef = [...]int8{
	0, -2, 2, 0, 0, -2, 71, 74, 72, 73,
	3, 64, 65, 66, 67, 68, 69, 61, 62, 63,
	0, 0, 0, 0, 10, 7, 0, 0, 0, 0,
	0, 0, 0, 0, 9, 11, 70, 11, 0, 0,
	78, 0, 0, 0, 0, 12, 0, 0, 0, 0,
	0, 0, 0, 0, 39, 0, 0, 58, 0, 79,
	0, 0, 0, 0, 4, 5, 6, 0, 29, 30,
	26, 27, 0, 20, 21, 22, 23, 24, 25, 0,
	15, 18, 0, 0, 59, 60, 0, 91, 75, 76,
	77, 31, 0, 0, 17, 0, 0, 40, 41, 0,
	0, 0, 14, 8, 0, 0, 0, 19, 0, 0,
	0, 57, 92, 93, 0, 28, 13, 16, 0, 32,
	11, 0, 0, 36, 37, 0, 0, 0, 38, 0,
	0, 80, 82, 0, 0, 42, 44, 45, 0, 33,
	88, 0, 0, 83, 84, 0, 35, 43, 56, 33,
	46, 48, 49, 50, 51, 0, 34, 0, 0, 81,
	87, 0, 0, 0, 0, 0, 90, 89, 52, 53,
	85, 0, 47, 0, 0, 86, 0, 55, 54,
}

var snowpTok1 = [...]int8{
	1,
}

var snowpTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46,
}

var snowpTok3 = [...]int8{
	0,
}

var snowpErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	snowpDebug        = 0
	snowpErrorVerbose = false
)

type snowpLexer interface {
	Lex(lval *snowpSymType) int
	Error(s string)
}

type snowpParser interface {
	Parse(snowpLexer) int
	Lookahead() int
}

type snowpParserImpl struct {
	lval  snowpSymType
	stack [snowpInitialStackSize]snowpSymType
	char  int
}

func (p *snowpParserImpl) Lookahead() int {
	return p.char
}

func snowpNewParser() snowpParser {
	return &snowpParserImpl{}
}

const snowpFlag = -1000

func snowpTokname(c int) string {
	if c >= 1 && c-1 < len(snowpToknames) {
		if snowpToknames[c-1] != "" {
			return snowpToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func snowpStatname(s int) string {
	if s >= 0 && s < len(snowpStatenames) {
		if snowpStatenames[s] != "" {
			return snowpStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func snowpErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !snowpErrorVerbose {
		return "syntax error"
	}

	for _, e := range snowpErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + snowpTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(snowpPact[state])
	for tok := TOKSTART; tok-1 < len(snowpToknames); tok++ {
		if n := base + tok; n >= 0 && n < snowpLast && int(snowpChk[int(snowpAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if snowpDef[state] == -2 {
		i := 0
		for snowpExca[i] != -1 || int(snowpExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; snowpExca[i] >= 0; i += 2 {
			tok := int(snowpExca[i])
			if tok < TOKSTART || snowpExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if snowpExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += snowpTokname(tok)
	}
	return res
}

func snowplex1(lex snowpLexer, lval *snowpSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(snowpTok1[0])
		goto out
	}
	if char < len(snowpTok1) {
		token = int(snowpTok1[char])
		goto out
	}
	if char >= snowpPrivate {
		if char < snowpPrivate+len(snowpTok2) {
			token = int(snowpTok2[char-snowpPrivate])
			goto out
		}
	}
	for i := 0; i < len(snowpTok3); i += 2 {
		token = int(snowpTok3[i+0])
		if token == char {
			token = int(snowpTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(snowpTok2[1]) /* unknown char */
	}
	if snowpDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", snowpTokname(token), uint(char))
	}
	return char, token
}

func snowpParse(snowplex snowpLexer) int {
	return snowpNewParser().Parse(snowplex)
}

func (snowprcvr *snowpParserImpl) Parse(snowplex snowpLexer) int {
	var snowpn int
	var snowpVAL snowpSymType
	var snowpDollar []snowpSymType
	_ = snowpDollar // silence set and not used
	snowpS := snowprcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	snowpstate := 0
	snowprcvr.char = -1
	snowptoken := -1 // snowprcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		snowpstate = -1
		snowprcvr.char = -1
		snowptoken = -1
	}()
	snowpp := -1
	goto snowpstack

ret0:
	return 0

ret1:
	return 1

snowpstack:
	/* put a state and value onto the stack */
	if snowpDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", snowpTokname(snowptoken), snowpStatname(snowpstate))
	}

	snowpp++
	if snowpp >= len(snowpS) {
		nyys := make([]snowpSymType, len(snowpS)*2)
		copy(nyys, snowpS)
		snowpS = nyys
	}
	snowpS[snowpp] = snowpVAL
	snowpS[snowpp].yys = snowpstate

snowpnewstate:
	snowpn = int(snowpPact[snowpstate])
	if snowpn <= snowpFlag {
		goto snowpdefault /* simple state */
	}
	if snowprcvr.char < 0 {
		snowprcvr.char, snowptoken = snowplex1(snowplex, &snowprcvr.lval)
	}
	snowpn += snowptoken
	if snowpn < 0 || snowpn >= snowpLast {
		goto snowpdefault
	}
	snowpn = int(snowpAct[snowpn])
	if int(snowpChk[snowpn]) == snowptoken { /* valid shift */
		snowprcvr.char = -1
		snowptoken = -1
		snowpVAL = snowprcvr.lval
		snowpstate = snowpn
		if Errflag > 0 {
			Errflag--
		}
		goto snowpstack
	}

snowpdefault:
	/* default state action */
	snowpn = int(snowpDef[snowpstate])
	if snowpn == -2 {
		if snowprcvr.char < 0 {
			snowprcvr.char, snowptoken = snowplex1(snowplex, &snowprcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if snowpExca[xi+0] == -1 && int(snowpExca[xi+1]) == snowpstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			snowpn = int(snowpExca[xi+0])
			if snowpn < 0 || snowpn == snowptoken {
				break
			}
		}
		snowpn = int(snowpExca[xi+1])
		if snowpn < 0 {
			goto ret0
		}
	}
	if snowpn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			snowplex.Error(snowpErrorMessage(snowpstate, snowptoken))
			Nerrs++
			if snowpDebug >= 1 {
				__yyfmt__.Printf("%s", snowpStatname(snowpstate))
				__yyfmt__.Printf(" saw %s\n", snowpTokname(snowptoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for snowpp >= 0 {
				snowpn = int(snowpPact[snowpS[snowpp].yys]) + snowpErrCode
				if snowpn >= 0 && snowpn < snowpLast {
					snowpstate = int(snowpAct[snowpn]) /* simulate a shift of "error" */
					if int(snowpChk[snowpstate]) == snowpErrCode {
						goto snowpstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if snowpDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", snowpS[snowpp].yys)
				}
				snowpp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if snowpDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", snowpTokname(snowptoken))
			}
			if snowptoken == snowpEofCode {
				goto ret1
			}
			snowprcvr.char = -1
			snowptoken = -1
			goto snowpnewstate /* try again in the same state */
		}
	}

	/* reduction by production snowpn */
	if snowpDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", snowpn, snowpStatname(snowpstate))
	}

	snowpnt := snowpn
	snowppt := snowpp
	_ = snowppt // guard against "declared and not used"

	snowpp -= int(snowpR2[snowpn])
	// snowpp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if snowpp+1 >= len(snowpS) {
		nyys := make([]snowpSymType, len(snowpS)*2)
		copy(nyys, snowpS)
		snowpS = nyys
	}
	snowpVAL = snowpS[snowpp+1]

	/* consult goto table to find next state */
	snowpn = int(snowpR1[snowpn])
	snowpg := int(snowpPgo[snowpn])
	snowpj := snowpg + snowpS[snowpp].yys + 1

	if snowpj >= snowpLast {
		snowpstate = int(snowpAct[snowpg])
	} else {
		snowpstate = int(snowpAct[snowpj])
		if int(snowpChk[snowpstate]) != -snowpn {
			snowpstate = int(snowpAct[snowpg])
		}
	}
	// dummy call; replaced with literal code
	switch snowpnt {

	case 1:
		snowpDollar = snowpS[snowppt-2 : snowppt+1]
//line parser.y:87
		{
			snowpVAL.root = Root{Id: snowpDollar[1].uniqueId, Stmts: snowpDollar[2].stmts}
			top = &snowpVAL.root // Set the global top variable
		}
	case 2:
		snowpDollar = snowpS[snowppt-0 : snowppt+1]
//line parser.y:94
		{
			snowpVAL.stmts = []Statement{}
		}
	case 3:
		snowpDollar = snowpS[snowppt-2 : snowppt+1]
//line parser.y:95
		{
			snowpVAL.stmts = append(snowpDollar[1].stmts, snowpDollar[2].stmt)
		}
	case 4:
		snowpDollar = snowpS[snowppt-5 : snowppt+1]
//line parser.y:100
		{
			snowpVAL.imprt = Import{Path: snowpDollar[2].rawval, Name: snowpDollar[4].rawval, Lang: LangGeneric}
		}
	case 5:
		snowpDollar = snowpS[snowppt-5 : snowppt+1]
//line parser.y:107
		{
			snowpVAL.imprt = Import{Path: snowpDollar[2].rawval, Name: snowpDollar[4].rawval, Lang: LangTypeScript}
		}
	case 6:
		snowpDollar = snowpS[snowppt-5 : snowppt+1]
//line parser.y:114
		{
			snowpVAL.imprt = Import{Path: snowpDollar[2].rawval, Name: snowpDollar[4].rawval, Lang: LangGo}
		}
	case 7:
		snowpDollar = snowpS[snowppt-1 : snowppt+1]
//line parser.y:121
		{
			snowpVAL.doc = Docstring{Raw: snowpDollar[1].docRaw}
		}
	case 8:
		snowpDollar = snowpS[snowppt-0 : snowppt+1]
//line parser.y:127
		{
			snowpVAL.docRaw = ""
		}
	case 9:
		snowpDollar = snowpS[snowppt-2 : snowppt+1]
//line parser.y:128
		{
			snowpVAL.docRaw = snowpDollar[1].docRaw + snowpDollar[2].rawval
		}
	case 10:
		snowpDollar = snowpS[snowppt-1 : snowppt+1]
//line parser.y:132
		{
			snowpVAL.dec = Decorators{Doc: snowpDollar[1].doc}
		}
	case 11:
		snowpDollar = snowpS[snowppt-0 : snowppt+1]
//line parser.y:136
		{
			snowpVAL.uniqueId = UniqueID{}
		}
	case 12:
		snowpDollar = snowpS[snowppt-1 : snowppt+1]
//line parser.y:137
		{
			snowpVAL.uniqueId = snowpDollar[1].uniqueId
		}
	case 13:
		snowpDollar = snowpS[snowppt-4 : snowppt+1]
//line parser.y:142
		{
			snowpVAL.typ = List{Type: snowpDollar[3].typ}
		}
	case 14:
		snowpDollar = snowpS[snowppt-1 : snowppt+1]
//line parser.y:148
		{
			var i int
			i, err := strconv.Atoi(snowpDollar[1].rawval)
			if err != nil {
				parseErr = err
			} else if i < 0 {
				parseErr = fmt.Errorf("blob byte-count must be greater than 0")
			} else {
				snowpVAL.num = i
			}
		}
	case 15:
		snowpDollar = snowpS[snowppt-0 : snowppt+1]
//line parser.y:162
		{
			snowpVAL.num = 0
		}
	case 16:
		snowpDollar = snowpS[snowppt-3 : snowppt+1]
//line parser.y:164
		{
			if snowpDollar[2].num <= 0 {
				parseErr = fmt.Errorf("blob byte-count must be greater than 0")
			} else {
				snowpVAL.num = snowpDollar[2].num
			}
		}
	case 17:
		snowpDollar = snowpS[snowppt-2 : snowppt+1]
//line parser.y:174
		{
			snowpVAL.typ = Blob{Count: snowpDollar[2].num}
		}
	case 18:
		snowpDollar = snowpS[snowppt-1 : snowppt+1]
//line parser.y:179
		{
			snowpVAL.typ = DerivedType{Name: snowpDollar[1].ident}
		}
	case 19:
		snowpDollar = snowpS[snowppt-3 : snowppt+1]
//line parser.y:183
		{
			snowpVAL.typ = DerivedType{ImportedFrom: snowpDollar[1].ident, Name: snowpDollar[3].ident}
		}
	case 20:
		snowpDollar = snowpS[snowppt-1 : snowppt+1]
//line parser.y:190
		{
			snowpVAL.typ = Uint{}
		}
	case 21:
		snowpDollar = snowpS[snowppt-1 : snowppt+1]
//line parser.y:191
		{
			snowpVAL.typ = Int{}
		}
	case 22:
		snowpDollar = snowpS[snowppt-1 : snowppt+1]
//line parser.y:192
		{
			snowpVAL.typ = Text{}
		}
	case 23:
		snowpDollar = snowpS[snowppt-1 : snowppt+1]
//line parser.y:193
		{
			snowpVAL.typ = Bool{}
		}
	case 24:
		snowpDollar = snowpS[snowppt-1 : snowppt+1]
//line parser.y:194
		{
			snowpVAL.typ = snowpDollar[1].typ
		}
	case 25:
		snowpDollar = snowpS[snowppt-1 : snowppt+1]
//line parser.y:195
		{
			snowpVAL.typ = snowpDollar[1].typ
		}
	case 28:
		snowpDollar = snowpS[snowppt-4 : snowppt+1]
//line parser.y:204
		{
			snowpVAL.typ = Future{Type: snowpDollar[3].typ}
		}
	case 31:
		snowpDollar = snowpS[snowppt-7 : snowppt+1]
//line parser.y:214
		{
			snowpVAL.stmt = Typedef{
				BaseTypedef: BaseTypedef{
					BaseStatement: BaseStatement{Dec: snowpDollar[1].dec},
					Ident:         snowpDollar[3].ident,
					UniqueID:      snowpDollar[4].uniqueId,
				},
				Type: snowpDollar[6].typ,
			}
		}
	case 32:
		snowpDollar = snowpS[snowppt-2 : snowppt+1]
//line parser.y:226
		{
			snowpVAL.num = snowpDollar[2].num
		}
	case 33:
		snowpDollar = snowpS[snowppt-0 : snowppt+1]
//line parser.y:229
		{
			snowpVAL.intp = nil
		}
	case 34:
		snowpDollar = snowpS[snowppt-1 : snowppt+1]
//line parser.y:231
		{
			tmp := snowpDollar[1].num
			snowpVAL.intp = &tmp
		}
	case 35:
		snowpDollar = snowpS[snowppt-4 : snowppt+1]
//line parser.y:239
		{
			snowpVAL.typ = Option{Type: snowpDollar[3].typ}
		}
	case 38:
		snowpDollar = snowpS[snowppt-5 : snowppt+1]
//line parser.y:251
		{
			snowpVAL.field = Field{
				Ident: snowpDollar[1].ident,
				Pos:   snowpDollar[2].num,
				Type:  snowpDollar[4].typ,
			}
		}
	case 39:
		snowpDollar = snowpS[snowppt-0 : snowppt+1]
//line parser.y:261
		{
			snowpVAL.fields = []Field{}
		}
	case 40:
		snowpDollar = snowpS[snowppt-2 : snowppt+1]
//line parser.y:262
		{
			snowpVAL.fields = append(snowpDollar[1].fields, snowpDollar[2].field)
		}
	case 41:
		snowpDollar = snowpS[snowppt-7 : snowppt+1]
//line parser.y:267
		{
			snowpVAL.stmt = Struct{
				BaseTypedef: BaseTypedef{
					BaseStatement: BaseStatement{Dec: snowpDollar[1].dec},
					Ident:         snowpDollar[3].ident,
					UniqueID:      snowpDollar[4].uniqueId,
				},
				Fields: snowpDollar[6].fields,
			}
		}
	case 42:
		snowpDollar = snowpS[snowppt-1 : snowppt+1]
//line parser.y:280
		{
			snowpVAL.cases = []Case{snowpDollar[1].cas}
		}
	case 43:
		snowpDollar = snowpS[snowppt-2 : snowppt+1]
//line parser.y:281
		{
			snowpVAL.cases = append(snowpDollar[1].cases, snowpDollar[2].cas)
		}
	case 44:
		snowpDollar = snowpS[snowppt-1 : snowppt+1]
//line parser.y:285
		{
			snowpVAL.cas = snowpDollar[1].cas
		}
	case 45:
		snowpDollar = snowpS[snowppt-1 : snowppt+1]
//line parser.y:286
		{
			snowpVAL.cas = snowpDollar[1].cas
		}
	case 46:
		snowpDollar = snowpS[snowppt-1 : snowppt+1]
//line parser.y:290
		{
			snowpVAL.caseLabels = []CaseLabel{snowpDollar[1].caseLabel}
		}
	case 47:
		snowpDollar = snowpS[snowppt-3 : snowppt+1]
//line parser.y:291
		{
			snowpVAL.caseLabels = append(snowpDollar[1].caseLabels, snowpDollar[3].caseLabel)
		}
	case 48:
		snowpDollar = snowpS[snowppt-1 : snowppt+1]
//line parser.y:295
		{
			snowpVAL.caseLabel = CaseLabelIdentifier{Ident: snowpDollar[1].ident}
		}
	case 49:
		snowpDollar = snowpS[snowppt-1 : snowppt+1]
//line parser.y:296
		{
			snowpVAL.caseLabel = CaseLabelNumber{Num: snowpDollar[1].num}
		}
	case 50:
		snowpDollar = snowpS[snowppt-1 : snowppt+1]
//line parser.y:297
		{
			snowpVAL.caseLabel = CaseLabelBool{Bool: true}
		}
	case 51:
		snowpDollar = snowpS[snowppt-1 : snowppt+1]
//line parser.y:298
		{
			snowpVAL.caseLabel = CaseLabelBool{Bool: false}
		}
	case 52:
		snowpDollar = snowpS[snowppt-1 : snowppt+1]
//line parser.y:302
		{
			snowpVAL.typ = snowpDollar[1].typ
		}
	case 53:
		snowpDollar = snowpS[snowppt-1 : snowppt+1]
//line parser.y:303
		{
			snowpVAL.typ = Void{}
		}
	case 54:
		snowpDollar = snowpS[snowppt-6 : snowppt+1]
//line parser.y:308
		{
			snowpVAL.cas = Case{
				Labels:   snowpDollar[2].caseLabels,
				Position: snowpDollar[3].intp,
				Type:     snowpDollar[5].typ,
			}
		}
	case 55:
		snowpDollar = snowpS[snowppt-5 : snowppt+1]
//line parser.y:319
		{
			snowpVAL.cas = Case{
				Labels:   nil,
				Position: snowpDollar[2].intp,
				Type:     snowpDollar[4].typ,
			}
		}
	case 56:
		snowpDollar = snowpS[snowppt-13 : snowppt+1]
//line parser.y:332
		{
			snowpVAL.stmt = Variant{
				BaseTypedef: BaseTypedef{
					BaseStatement: BaseStatement{Dec: snowpDollar[1].dec},
					Ident:         snowpDollar[3].ident,
					UniqueID:      snowpDollar[10].uniqueId,
				},
				SwitchVar:  snowpDollar[6].ident,
				SwitchType: snowpDollar[8].typ,
				Cases:      snowpDollar[12].cases,
			}
		}
	case 57:
		snowpDollar = snowpS[snowppt-4 : snowppt+1]
//line parser.y:348
		{
			snowpVAL.enumValue = EnumValue{
				Ident: snowpDollar[1].ident,
				Num:   snowpDollar[3].num,
			}
		}
	case 58:
		snowpDollar = snowpS[snowppt-1 : snowppt+1]
//line parser.y:357
		{
			snowpVAL.enumValues = []EnumValue{snowpDollar[1].enumValue}
		}
	case 59:
		snowpDollar = snowpS[snowppt-2 : snowppt+1]
//line parser.y:358
		{
			snowpVAL.enumValues = append(snowpDollar[1].enumValues, snowpDollar[2].enumValue)
		}
	case 60:
		snowpDollar = snowpS[snowppt-6 : snowppt+1]
//line parser.y:363
		{
			snowpVAL.stmt = Enum{
				BaseTypedef: BaseTypedef{
					BaseStatement: BaseStatement{Dec: snowpDollar[1].dec},
					Ident:         snowpDollar[3].ident,
				},
				Values: snowpDollar[5].enumValues,
			}
		}
	case 61:
		snowpDollar = snowpS[snowppt-1 : snowppt+1]
//line parser.y:375
		{
			snowpVAL.imprt = snowpDollar[1].imprt
		}
	case 62:
		snowpDollar = snowpS[snowppt-1 : snowppt+1]
//line parser.y:376
		{
			snowpVAL.imprt = snowpDollar[1].imprt
		}
	case 63:
		snowpDollar = snowpS[snowppt-1 : snowppt+1]
//line parser.y:377
		{
			snowpVAL.imprt = snowpDollar[1].imprt
		}
	case 64:
		snowpDollar = snowpS[snowppt-1 : snowppt+1]
//line parser.y:381
		{
			snowpVAL.stmt = snowpDollar[1].imprt
		}
	case 65:
		snowpDollar = snowpS[snowppt-1 : snowppt+1]
//line parser.y:382
		{
			snowpVAL.stmt = snowpDollar[1].stmt
		}
	case 66:
		snowpDollar = snowpS[snowppt-1 : snowppt+1]
//line parser.y:383
		{
			snowpVAL.stmt = snowpDollar[1].stmt
		}
	case 67:
		snowpDollar = snowpS[snowppt-1 : snowppt+1]
//line parser.y:384
		{
			snowpVAL.stmt = snowpDollar[1].stmt
		}
	case 68:
		snowpDollar = snowpS[snowppt-1 : snowppt+1]
//line parser.y:385
		{
			snowpVAL.stmt = snowpDollar[1].stmt
		}
	case 69:
		snowpDollar = snowpS[snowppt-1 : snowppt+1]
//line parser.y:386
		{
			snowpVAL.stmt = snowpDollar[1].stmt
		}
	case 70:
		snowpDollar = snowpS[snowppt-1 : snowppt+1]
//line parser.y:390
		{
			snowpVAL.ident = Identifier{Name: snowpDollar[1].rawval}
		}
	case 71:
		snowpDollar = snowpS[snowppt-2 : snowppt+1]
//line parser.y:394
		{
			snowpVAL.uniqueId = snowpDollar[1].uniqueId
		}
	case 72:
		snowpDollar = snowpS[snowppt-1 : snowppt+1]
//line parser.y:398
		{
			snowpVAL.rawval = snowpDollar[1].rawval
		}
	case 73:
		snowpDollar = snowpS[snowppt-1 : snowppt+1]
//line parser.y:399
		{
			snowpVAL.rawval = snowpDollar[1].rawval
		}
	case 74:
		snowpDollar = snowpS[snowppt-2 : snowppt+1]
//line parser.y:403
		{
			snowpVAL.uniqueId = UniqueID{Val: snowpDollar[2].rawval}
		}
	case 75:
		snowpDollar = snowpS[snowppt-2 : snowppt+1]
//line parser.y:407
		{
			snowpVAL.protoModifier = Errors{Type: snowpDollar[2].typ}
		}
	case 76:
		snowpDollar = snowpS[snowppt-2 : snowppt+1]
//line parser.y:408
		{
			snowpVAL.protoModifier = ArgHeader{Type: snowpDollar[2].typ}
		}
	case 77:
		snowpDollar = snowpS[snowppt-2 : snowppt+1]
//line parser.y:409
		{
			snowpVAL.protoModifier = ResHeader{Type: snowpDollar[2].typ}
		}
	case 78:
		snowpDollar = snowpS[snowppt-0 : snowppt+1]
//line parser.y:413
		{
			snowpVAL.protoModifiers = nil
		}
	case 79:
		snowpDollar = snowpS[snowppt-2 : snowppt+1]
//line parser.y:414
		{
			snowpVAL.protoModifiers = append(snowpDollar[1].protoModifiers, snowpDollar[2].protoModifier)
		}
	case 80:
		snowpDollar = snowpS[snowppt-0 : snowppt+1]
//line parser.y:418
		{
			snowpVAL.ident = Identifier{}
		}
	case 81:
		snowpDollar = snowpS[snowppt-2 : snowppt+1]
//line parser.y:419
		{
			snowpVAL.ident = snowpDollar[2].ident
		}
	case 82:
		snowpDollar = snowpS[snowppt-0 : snowppt+1]
//line parser.y:423
		{
			snowpVAL.params = nil
		}
	case 84:
		snowpDollar = snowpS[snowppt-1 : snowppt+1]
//line parser.y:428
		{
			snowpVAL.params = []Param{snowpDollar[1].param}
		}
	case 85:
		snowpDollar = snowpS[snowppt-3 : snowppt+1]
//line parser.y:429
		{
			snowpVAL.params = append(snowpDollar[1].params, snowpDollar[3].param)
		}
	case 86:
		snowpDollar = snowpS[snowppt-4 : snowppt+1]
//line parser.y:434
		{
			snowpVAL.param = Param{
				Ident: snowpDollar[1].ident,
				Pos:   snowpDollar[2].num,
				Type:  snowpDollar[4].typ,
			}
		}
	case 87:
		snowpDollar = snowpS[snowppt-3 : snowppt+1]
//line parser.y:445
		{
			snowpVAL.params = snowpDollar[2].params
		}
	case 88:
		snowpDollar = snowpS[snowppt-0 : snowppt+1]
//line parser.y:449
		{
			snowpVAL.typ = Void{}
		}
	case 89:
		snowpDollar = snowpS[snowppt-2 : snowppt+1]
//line parser.y:450
		{
			snowpVAL.typ = snowpDollar[2].typ
		}
	case 90:
		snowpDollar = snowpS[snowppt-7 : snowppt+1]
//line parser.y:455
		{
			snowpVAL.method = Method{
				BaseTypedef: BaseTypedef{
					BaseStatement: BaseStatement{Dec: snowpDollar[1].dec},
					Ident:         snowpDollar[2].ident,
				},
				Pos:     snowpDollar[3].num,
				Params:  snowpDollar[4].params,
				ArgType: snowpDollar[5].ident,
				ResType: snowpDollar[6].typ,
			}
		}
	case 91:
		snowpDollar = snowpS[snowppt-0 : snowppt+1]
//line parser.y:470
		{
			snowpVAL.methods = nil
		}
	case 92:
		snowpDollar = snowpS[snowppt-2 : snowppt+1]
//line parser.y:471
		{
			snowpVAL.methods = append(snowpDollar[1].methods, snowpDollar[2].method)
		}
	case 93:
		snowpDollar = snowpS[snowppt-8 : snowppt+1]
//line parser.y:478
		{
			pmsp, err := NewProtocolModifiers(snowpDollar[4].protoModifiers)
			if err != nil {
				parseErr = err
			}
			var pms ProtocolModifiers
			if pmsp != nil {
				pms = *pmsp
			}
			snowpVAL.stmt = Protocol{
				BaseTypedef: BaseTypedef{
					BaseStatement: BaseStatement{Dec: snowpDollar[1].dec},
					Ident:         snowpDollar[3].ident,
					UniqueID:      snowpDollar[5].uniqueId,
				},
				Modifiers: pms,
				Methods:   snowpDollar[7].methods,
			}
		}
	}
	goto snowpstack /* stack new state and value */
}
